use std::str::FromStr;

use query;

grammar;

sep<A, S>: Vec<A> = {
    <v:(<A> S)*> <e:A> => {
        let mut v = v;
        v.push(e);
        v
    }
};

pub query: query::Query = sep<query_elem, bar> => {
    let mut elems = <>;

    if elems.len() == 1 {
        elems.pop().unwrap()
    } else {
        query::Query::Chain(elems)
    }
};

query_elem: query::Query = {
    <ident> <expr*> => query::Query::Function(<>),
};

expr: query::Expression = {
    "a" => query::Expression::String("a".to_owned()),
};

ident: String = r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_owned();
num: i32 = r"[0-9]+" => i32::from_str(<>).unwrap();
bar: () = "|" => ();
